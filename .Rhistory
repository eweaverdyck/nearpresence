geom_line(data=df_means, aes(x=permutations,y=means), color = "blue")+
geom_line(data=df_maxes, aes(x=permutations, y=maxes), color = "red")+
labs(x="Lowest number of permutations",
y="range of permutation NPs lower than observed NPs",
title="Change in the range of permutation-based NP scores lower than observed as the lowest number of permutations is dropped")+
theme(legend.position="bottom")
mm_plot
mm_plot<-ggplot()+
geom_line(data=df_means, aes(x=permutations,y=means, color = "blue"))+
geom_line(data=df_maxes, aes(x=permutations, y=maxes, color = "red"))+
labs(x="Lowest number of permutations",
y="range of permutation NPs lower than observed NPs",
title="Change in the range of Clas_PLs as the lowest number of permutations is dropped")
mm_plot
mm_plot<-ggplot()+
geom_line(data=df_means, aes(x=permutations,y=means, color = "blue"), color = "blue")+
geom_line(data=df_maxes, aes(x=permutations, y=maxes, color = "red"), color = "red")+
labs(x="Lowest number of permutations",
y="range of permutation NPs lower than observed NPs",
title="Change in the range of Clas_PLs as the lowest number of permutations is dropped")
mm_plot
mm_plot<-ggplot()+
geom_line(data=df_means, aes(x=permutations,y=means, color = "blue"))+
geom_line(data=df_maxes, aes(x=permutations, y=maxes, color = "red"))+
labs(x="Lowest number of permutations",
y="range of permutation NPs lower than observed NPs",
title="Change in the range of Clas_PLs as the lowest number of permutations is dropped")
mm_plot
mm_plot<-ggplot()+
geom_line(data=df_means, aes(x=permutations,y=means))+
geom_line(data=df_maxes, aes(x=permutations, y=maxes))+
labs(x="Lowest number of permutations",
y="range of permutation NPs lower than observed NPs",
title="Change in the range of Clas_PLs as the lowest number of permutations is dropped")
mm_plot
df_means<-data.frame("permutations"=perm_seq, "range"=means, "stat"=rep("mean")
df_means<-data.frame("permutations"=perm_seq, "range"=means, "stat"=rep("mean"))
df_maxes<-data.frame("permutations"=perm_seq, "range" = maxes, "stat"=rep("max"))
df_mm<-rbind(df_means, df_maxes)
View(df_mm)
mm_plot<-ggplot()+
geom_line(data=df_mm, aes(x=permutations,y=range, color=stat))+
labs(x="Lowest number of permutations",
y="range of permutation NPs lower than observed NPs",
title="Change in the range of Clas_PLs as the lowest number of permutations
mm_plot<-ggplot()+
geom_line(data=df_mm, aes(x=permutations,y=range, color=stat))+
labs(x="Lowest number of permutations",
y="range of permutation NPs lower than observed NPs",
title="Change in the range of Clas_PLs as the lowest number of permutations is dropped")
mm_plot
df_means<-data.frame("permutations"=perm_seq, "range"=means, "statistic"=rep("mean"))
df_maxes<-data.frame("permutations"=perm_seq, "range" = maxes, "statistic"=rep("max"))
df_mm<-rbind(df_means, df_maxes)
mm_plot<-ggplot()+
geom_line(data=df_mm, aes(x=permutations,y=range, color=stat))+
labs(x="Lowest number of permutations",
y="Range of permutation NPs lower than observed NP",
title="Change in the range of Clas_PLs as the lowest number of permutations is dropped")
mm_plot
mm_plot<-ggplot()+
geom_line(data=df_mm, aes(x=permutations,y=range, color=statistic))+
labs(x="Lowest number of permutations",
y="Range of permutation NPs lower than observed NP",
title="Change in the range of Clas_PLs as the lowest number of permutations is dropped")
mm_plot
mm_plot<-ggplot()+
geom_line(data=df_mm, aes(x=permutations,y=range, color=statistic))+
labs(x="Lowest number of permutations",
y="Range of permutation NPs lower than observed NP",
title="Change in the range of Clas_PLs as the lowest number of permutations is dropped")+
scale_x_continuous(breaks=perm_seq)
mm_plot
mm_plot<-ggplot()+
geom_line(data=df_mm, aes(x=permutations,y=range, color=statistic))+
labs(x="Lowest number of permutations",
y="Range of permutation NPs lower than observed NP",
title="Change in the range of Clas_PLs as the lowest number of permutations is dropped")+
scale_x_continuous(breaks=perm_seq, labels=seq(1000, 10000, 1000))
mm_plot<-ggplot()+
geom_line(data=df_mm, aes(x=permutations,y=range, color=statistic))+
labs(x="Lowest number of permutations",
y="Range of permutation NPs lower than observed NP",
title="Change in the range of Clas_PLs as the lowest number of permutations is dropped")+
scale_x_continuous(labels=seq(1000, 10000, 1000))
mm_plot
mm_plot<-ggplot()+
geom_line(data=df_mm, aes(x=permutations,y=range, color=statistic))+
labs(x="Lowest number of permutations",
y="Range of permutation NPs lower than observed NP",
title="Change in the range of Clas_PLs as the lowest number of permutations is dropped")+
scale_x_continuous(breaks=seq(1000,10000,1000), labels=seq(1000, 10000, 1000))
mm_plot
sig.99<-clas_pls_m>0.99
sig.95<-clas_pls_m>0.95
sig.90<-clas_pls_m>0.90
consistent<-function(x){
y<-all(x)|!any(x)
}
sig.99.cons<-apply(sig.99, MARGIN=1, FUN=consistent)
which(sig.99.cons==FALSE)
length(which(sig.99.cons==FALSE))
sig.95.cons<-apply(sig.95, MARGIN = 1, FUN = consistent)
which(sig.95.cons==FALSE)
length(which(sig.95.cons==FALSE))
sig.90.cons<-apply(sig.95, MARGIN = 1, FUN = consistent)
which(sig.90.cons==FALSE)
length(which(sig.90.cons==FALSE))
const.99<-data.frame(matrix(data=NA, nrow=length(test_units), ncol=length(perm_seq)))
row.names(const.99)<-test_units
colnames(const.99)<-perm_seq[1:length(perm_seq)]
const.95<-data.frame(matrix(data=NA, nrow=length(test_units), ncol=length(perm_seq)))
row.names(const.95)<-test_units
colnames(const.95)<-perm_seq[1:length(perm_seq)]
const.90<-data.frame(matrix(data=NA, nrow=length(test_units), ncol=length(perm_seq)))
row.names(const.90)<-test_units
colnames(const.90)<-perm_seq[1:length(perm_seq)]
for(p in 1:(length(perm_seq)-1)){
const.99[,p]<-apply(sig.99[,p:length(perm_seq)], MARGIN=1, FUN=consistent)
const.95[,p]<-apply(sig.95[,p:length(perm_seq)], MARGIN=1, FUN=consistent)
const.90[,p]<-apply(sig.90[,p:length(perm_seq)], MARGIN=1, FUN=consistent)
}
noerrors.99<-apply(const.99, MARGIN=2, FUN=all)
noerrors.95<-apply(const.95, MARGIN=2, FUN=all)
noerrors.90<-apply(const.90, MARGIN=2, FUN=all)
errors.99<-apply(const.99, MARGIN=2, FUN=function(x) length(which(x==FALSE)))
errors.95<-apply(const.95, MARGIN=2, FUN=function(x) length(which(x==FALSE)))
errors.90<-apply(const.90, MARGIN=2, FUN=function(x) length(which(x==FALSE)))
errors<-data.frame("99"=errors.99, "95"=errors.95, "90"=errors.90)
View(errors)
error.90
errors.90
df_errors.99<-data.frame("permutations"=perm_seq, "errors"=errors.99, "significance"=rep(0.01))
df_errors.95<-data.frame("permutations"=perm_seq, "errors"=errors.95, "significance"=rep(0.05))
df_errors.90<-data.frame("permutations"=perm_seq, "errors"=errors.90, "significance"=rep(0.10))
errors2<-rbind(df_errors.99, df_errors.95, df_errors.90)
error_plot<-ggplot()+
geom_line(data=errors2, aes(x=permutations, y=errors, color=significance))
error_plot
df_errors.99<-data.frame("permutations"=perm_seq, "errors"=errors.99, "significance"=rep("0.01"))
df_errors.95<-data.frame("permutations"=perm_seq, "errors"=errors.95, "significance"=rep("0.05"))
df_errors.90<-data.frame("permutations"=perm_seq, "errors"=errors.90, "significance"=rep("0.10"))
errors2<-rbind(df_errors.99, df_errors.95, df_errors.90)
error_plot<-ggplot()+
geom_line(data=errors2, aes(x=permutations, y=errors, color=significance))
error_plot
df_errors.99<-data.frame("permutations"=perm_seq, "errors"=errors.99/130, "significance"=rep("0.01"))
df_errors.95<-data.frame("permutations"=perm_seq, "errors"=errors.95/130, "significance"=rep("0.05"))
df_errors.90<-data.frame("permutations"=perm_seq, "errors"=errors.90/130, "significance"=rep("0.10"))
errors2<-rbind(df_errors.99, df_errors.95, df_errors.90)
error_plot<-ggplot()+
geom_line(data=errors2, aes(x=permutations, y=errors, color=significance))+
scale_y_continuous(name="portion of units with inconsistent designations")+
scale_x_continuous(name="Lowest number of permutations", breaks=seq(1000,10000,1000), labels=seq(1000, 10000, 1000))
error_plot
error_plot<-ggplot()+
geom_line(data=errors2, aes(x=permutations, y=errors, color=significance))+
labs(x="Lowest number of permutations", y="Portion of units with inconsistent designations",
title="Inconsistently designated units across different numbers of permutations (errors)")
scale_x_continuous(breaks=seq(1000,10000,1000), labels=seq(1000, 10000, 1000))
error_plot
error_plot<-ggplot()+
geom_line(data=errors2, aes(x=permutations, y=errors, color=significance))+
labs(x="Lowest number of permutations", y="Portion of units with inconsistent designations",
title="Inconsistently designated units across different numbers of permutations (errors)")+
scale_x_continuous(breaks=seq(1000,10000,1000), labels=seq(1000, 10000, 1000))
error_plot
save.image("~/ArcGIS/Projects/NearPresence/NPAnalysisPub/perm_seq_test_data.RData")
?idw_nnear
devtools::load_all()
?idw_nnear
load("~/ArcGIS/Projects/NearPresence/NPRPackage/nearpresence/data/chron.rda")
load("~/ArcGIS/Projects/NearPresence/NPRPackage/nearpresence/data/tracts.rda")
View(chron)
View(tracts)
plot(tracts)
idw_nnear<-IDW_nnear(tracts=tracts, tracts_ID = "UnitID", n = 8)
idw_nnear<-IDW_nnear(tracts = tracts, tracts_ID = "UnitID", n = 8)
idw_radius<-IDW_radius(tracts = tracts, tracts_ID = "UnitID", r = 1000)
?IDW_radius
?NP
np<-NP(chron = chron, chron_ID = "Survey_Uni", periods = c("Prehist", "IA", "Arch", "Clas", "Hell", "Cl_He", "ER", "MR", "LR", "LR_EB", "Roma", "EB", "Byz", "Otto"), tracts = tracts, tracts_ID = "UnitID", swl = idw_nnear, perms = 100, cut = 0.05)
View(np)
plot(np)
plot(np$Clas_Res)
plot(np["Clas_Res"])
NP(chron = chron, chron_ID = "Survey_Uni", periods = c("Prehist", "IA", "Arch", "Clas", "Hell", "Cl_He", "ER", "MR", "LR", "LR_EB", "Roma", "EB", "Byz", "Otto"), tracts = tracts, tracts_ID = "UnitID", swl = idw_radius, perms = 100, cut = 0.05)
np_rad<-NP(chron = chron, chron_ID = "Survey_Uni", periods = c("Prehist", "IA", "Arch", "Clas", "Hell", "Cl_He", "ER", "MR", "LR", "LR_EB", "Roma", "EB", "Byz", "Otto"), tracts = tracts, tracts_ID = "UnitID", swl = idw_radius, perms = 100, cut = 0.05)
np_near<-NP(chron = chron, chron_ID = "Survey_Uni", periods = c("Prehist", "IA", "Arch", "Clas", "Hell", "Cl_He", "ER", "MR", "LR", "LR_EB", "Roma", "EB", "Byz", "Otto"), tracts = tracts, tracts_ID = "UnitID", swl = IDW_nnear(tracts = tracts, tracts_ID = "UnitID", n = 8), perms = 100, cut = 0.05)
plot(np_near["Clas_Res"])
np_rad<-NP(chron = chron, chron_ID = "Survey_Uni", periods = c("Prehist", "IA", "Arch", "Clas", "Hell", "Cl_He", "ER", "MR", "LR", "LR_EB", "Roma", "EB", "Byz", "Otto"), tracts = tracts, tracts_ID = "UnitID", swl = IDW_radius(tracts = tracts, tracts_ID = "UnitID", r = 1000), perms = 100, cut = 0.05)
plot(np_rad["Clas_Res"])
plot(np_rad["Clas_mem"])
plot(np_near["Clas_mem"])
devtools::document()
?NP
?IDW_nnear
devtools::document()
?NP
np_near<-NP(chron = chron,
chron_ID = "Survey_Uni",
periods = c("Clas", "Hell", "Cl_He", "ER", "MR", "LR", "LR_EB"),
tracts = tracts,
tracts_ID = "UnitID",
swl = IDW_nnear(tracts = tracts, tracts_ID = "UnitID", n = 8),
perms = 100,
cut = 0.05)
devtools::document()
?NP
np_near<-NP(chron = chron,
chron_ID = "Survey_Uni",
periods = c("Clas", "Hell", "Cl_He", "ER", "MR", "LR", "LR_EB"),
tracts = tracts,
tracts_ID = "UnitID",
swl = IDW_nnear(tracts = tracts, tracts_ID = "UnitID", n = 8),
perms = 100,
cut = 0.05)
np_rad<-NP(chron = chron,
chron_ID = "Survey_Uni",
periods = c("Clas", "Hell", "Cl_He", "ER", "MR", "LR", "LR_EB"),
tracts = tracts,
tracts_ID = "UnitID",
swl = IDW_radius(tracts = tracts, tracts_ID = "UnitID", r = 500),
perms = 100,
cut = 0.05)
plot(np_rad["Clas_mem"])
plot(np_near["Clas_mem"])
install.packages("mortARR")
browseVignettes()
View(np_near)
plot(np_near["Clas"])
View(np_near)
install.packages(archeofrag)
install.packages("archeofrag")
data()
data(package=nearpresence)
data(package="nearpresence")
install.packages("knitr")
library(knitr)
install.packages("rmarkdown")
usethis::use_vignette("nearpresence-vignette")
usethis::use_vignette("nearpresence")
devtools::load_all()
devtools::load_all()
devtools::check()
warning()
vignette("Archeofrag")
vignett("Archeofrag: Tools for Refitting and Stratigraphical Analysis in Archaeology")
vignette("Archeofrag: Tools for Refitting and Stratigraphical Analysis in Archaeology")
library(archeofrag)
vignette("Archeofrag: Tools for Refitting and Stratigraphical Analysis in Archaeology")
chron<-data(chron, pakcage = "nearpresence")
chron<-data("chron", package = "nearpresence")
chron<-data("chron.rda", package = "nearpresence")
chron<-data(chron.rda, package = "nearpresence")
data(chron)
rm(tracts)
data(tracts)
class(tracts)
?NP
par()
par(mfrow = c(1, 2))
plot(np_near["Clas_Res"])
plot(np_near["Clas_mem"])
par(mfrow = c(1, 1))
palette()
?rainbow
factors(np_near$Clas_Res)
levels(np_near$Clas_Res)
factor(np_near$Clas_Res)
colors<-c("#FF6633", "#3333FF", "#99CC66", "#CC0033", "#FFFF99", "#FFCC99")
plot(np_near["Clas_Res"], col=colors)
plot(np_near["Clas_Res"])
plot(np_near["Clas_Res"], col = c("#FF6633", "#3333FF", "#99CC66", "#CC0033", "#FFFF99", "#FFCC99"))
plot(np_near["Clas_Res"])
colors<-ifelse(test = np_nnear$Clas_Res == "Present, High NP", yes = "#CC0033",
no = ifelse(np_nnear$Clas_Res == "Present, Low NP", yes = "#FFFF99",
no = ifelse(np_nnear$Clas_Res == "Present, Moderate NP", yes = "#FFCC99",
no = ifelse(np_nnear$Clas_Res == "Absent, High NP", "#FF6633",
no = ifelse(np_nnear$Clas_Res == "Absent, Low NP", "#3333FF", no = ifelse(np_nnear$Clas_Res == "Absent, Moderate NP", "#99CC66", no = "black"))))))
colors<-ifelse(test = np_near$Clas_Res == "Present, High NP", yes = "#CC0033",
no = ifelse(np_near$Clas_Res == "Present, Low NP", yes = "#FFFF99",
no = ifelse(np_near$Clas_Res == "Present, Moderate NP", yes = "#FFCC99",
no = ifelse(np_near$Clas_Res == "Absent, High NP", "#FF6633",
no = ifelse(np_near$Clas_Res == "Absent, Low NP", "#3333FF", no = ifelse(np_near$Clas_Res == "Absent, Moderate NP", "#99CC66", no = "black"))))))
plot(np_near["Clas_Res", col=colors])
plot(np_near["Clas_Res"], col=colors)
legend("right", legend = c("Present, High NP", "Present, Low NP", "Present, Moderate NP", "Absent, High NP", "Absent, Low NP", "Absent, Moderate NP"), fill = c("#CC0033", "#FFFF99", "#FFCC99","#FF6633", "#3333FF", "#99CC66"))
colors<-ifelse(test = np_near$Clas_Res == "Present, High NP", yes = "#e60000",
no = ifelse(np_near$Clas_Res == "Present, Low NP", yes = "#FFFF99",
no = ifelse(np_near$Clas_Res == "Present, Moderate NP", yes = "#FFCC99",
no = ifelse(np_near$Clas_Res == "Absent, High NP", "#FF6633",
no = ifelse(np_near$Clas_Res == "Absent, Low NP", "#3333FF", no = ifelse(np_near$Clas_Res == "Absent, Moderate NP", "#99CC66", no = "black"))))))
plot(np_near["Clas_Res"], col=colors)
#Create a color vector for visualization
colors<-ifelse(test = np_near$Clas_Res == "Present, High NP", yes = "#e60000",
no = ifelse(np_near$Clas_Res == "Present, Low NP", yes = "#feff73",
no = ifelse(np_near$Clas_Res == "Present, Moderate NP", yes = "#ffaa01",
no = ifelse(np_near$Clas_Res == "Absent, High NP", "#febebe",
no = ifelse(np_near$Clas_Res == "Absent, Low NP", "#ddd2ff", no = ifelse(np_near$Clas_Res == "Absent, Moderate NP", "#b5d69f", no = "black"))))))
plot(np_near["Clas_Res"], col=colors)
legend("right", legend = c("Present, High NP", "Present, Low NP", "Present, Moderate NP", "Absent, High NP", "Absent, Low NP", "Absent, Moderate NP"), fill = c("e60000", "#feff73", "#ffaa01","#febebe", "#ddd2ff", "#b5d69f"))
legend("right", legend = c("Present, High NP", "Present, Low NP", "Present, Moderate NP", "Absent, High NP", "Absent, Low NP", "Absent, Moderate NP"), fill = c("#e60000", "#feff73", "#ffaa01","#febebe", "#ddd2ff", "#b5d69f"))
colors<-ifelse(test = np_near$Clas_Res == "Present, High NP", yes = "#e60000",
no = ifelse(np_near$Clas_Res == "Present, Low NP", yes = "#feff73",
no = ifelse(np_near$Clas_Res == "Present, Moderate NP", yes = "#ffaa01",
no = ifelse(np_near$Clas_Res == "Absent, High NP", "#febebe",
no = ifelse(np_near$Clas_Res == "Absent, Low NP", "#ddd2ff", no = ifelse(np_near$Clas_Res == "Absent, Moderate NP", "#b5d69f", no = "black"))))))
dev.new(width=550, height=330, unit="px")
plot(np_near["Clas_Res"], col=colors)
legend("right", legend = c("Present, High NP", "Present, Low NP", "Present, Moderate NP", "Absent, High NP", "Absent, Low NP", "Absent, Moderate NP"), fill = c("#e60000", "#feff73", "#ffaa01","#febebe", "#ddd2ff", "#b5d69f"))
dev.new(width=550, height=330, unit="px", noRStudioGD = TRUE)
plot(np_near["Clas_Res"], col=colors)
legend("right", legend = c("Present, High NP", "Present, Low NP", "Present, Moderate NP", "Absent, High NP", "Absent, Low NP", "Absent, Moderate NP"), fill = c("#e60000", "#feff73", "#ffaa01","#febebe", "#ddd2ff", "#b5d69f"))
plot(np_near["Clas"])
usethis::use_readme_rmd()
data(tracts)
data(chron)
plot(merge(tracts, chron, by.x "UnitID", by.y = "SurveyUni")["Clas"])
plot(merge(tracts, chron, by.x = "UnitID", by.y = "SurveyUni")["Clas"])
plot(merge(tracts, chron, by.x = "UnitID", by.y = "Survey_Uni")["Clas"])
data(tracts)
data(chron)
np<-NP(NP(chron = chron,
chron_ID = "Survey_Uni",
periods = "Clas",
tracts = tracts,
tracts_ID = "UnitID",
swl = IDW_nnear(tracts = tracts, tracts_ID = "UnitID", n = 8),
perms = 100,
cut = 0.05))
plot(np["Clas_Res"])
np<-NP(NP(chron = chron,
chron_ID = "Survey_Uni",
periods = "Clas",
tracts = tracts,
tracts_ID = "UnitID",
swl = IDW_nnear(tracts = tracts, tracts_ID = "UnitID", n = 8),
perms = 100,
cut = 0.05))
dev.tools::load_all()
devtools::load_all()
np<-NP(NP(chron = chron,
chron_ID = "Survey_Uni",
periods = "Clas",
tracts = tracts,
tracts_ID = "UnitID",
swl = IDW_nnear(tracts = tracts, tracts_ID = "UnitID", n = 8),
perms = 100,
cut = 0.05))
names(chron)
np<-NP(NP(chron = chron,
chron_ID = "Survey_Uni",
periods = "Clas",
tracts = tracts,
tracts_ID = "UnitID",
swl = IDW_nnear(tracts = tracts, tracts_ID = "UnitID", n = 8),
perms = 100,
cut = 0.05))
np<-NP(NP(chron = chron,
chron_ID = "Survey_Uni",
periods = "Clas",
tracts = tracts,
tracts_ID = "UnitID",
swl = IDW_nnear(tracts = tracts, tracts_ID = "UnitID", n = 8),
perms = 100,
cut = 0.05))
?NP
NP(chron = chron,
chron_ID = "Survey_Uni",
periods = c("Clas", "Hell", "Cl_He", "ER", "MR", "LR", "LR_EB"),
tracts = tracts,
tracts_ID = "UnitID",
swl = IDW_nnear(tracts = tracts, tracts_ID = "UnitID", n = 8),
perms = 100,
cut = 0.05)
NP(chron = chron,
chron_ID = "Survey_Uni",
periods = "Clas",
tracts = tracts,
tracts_ID = "UnitID",
swl = IDW_nnear(tracts = tracts, tracts_ID = "UnitID", n = 8),
perms = 100,
cut = 0.05)
data(tracts)
data(chron)
np<-NP(chron = chron,
chron_ID = "Survey_Uni",
periods = "Clas",
tracts = tracts,
tracts_ID = "UnitID",
swl = IDW_nnear(tracts = tracts, tracts_ID = "UnitID", n = 8),
perms = 100,
cut = 0.05)
plot(np["Clas_Res"])
plot(np["Clas_Res"])
devtools::load_all()
plot(merge(tracts, chron, by.x = "UnitID", by.y = "Survey_Uni")["Clas"], col = Clas)
plot(merge(tracts, chron, by.x = "UnitID", by.y = "Survey_Uni")["Clas"], col = "Clas")
plot(merge(tracts, chron, by.x = "UnitID", by.y = "Survey_Uni")["Clas"])
plot(np["Clas_Res"])
colors = np["Clas_Res"]
plot(np["Clas_Res"], col=colors)
np.colors<-function(NP_Results){
colors.df<-as.data.frame(matrix(nrow=length(NP_Results),ncol=2))
colnames(colors.df)<-c("result","color")
colors.df$result<-NP_Results
colors.df$color[colors$result == "Present, High NP"] <- "#e6000"
colors.df$color[colors$result == "Present, Low NP"] <- "#feff73"
colors.df$color[colors$result == "Present, Moderate NP"] <- "#ffaa01"
colors.df$color[colors$result == "Absent, High NP"] <- "#febebe"
colors.df$color[colors$result == "Absent, Low NP"] <- "#ddd2ff"
colors.df$color[colors$result == "Absent, Moderate NP"] <- "#b5d69f"
colors<-colors.df$color
return(colors)
}
testcolors<-np.colors(np$Clas_Res)
NP_Results<-np$Clas_Res
colors.df<-as.data.frame(matrix(nrow=length(NP_Results),ncol=2))
colnames(colors.df)<-c("result","color")
colors.df$result<-NP_Results
colors.df$color[colors$result == "Absent, Moderate NP"] <- "#b5d69f"
View(colors.df)
np.colors<-function(NP_Results){
colors.df<-as.data.frame(matrix(nrow=length(NP_Results),ncol=2))
colnames(colors.df)<-c("result","color")
colors.df$result<-NP_Results
colors.df$color[colors.df$result == "Present, High NP"] <- "#e6000"
colors.df$color[colors.df$result == "Present, Low NP"] <- "#feff73"
colors.df$color[colors.df$result == "Present, Moderate NP"] <- "#ffaa01"
colors.df$color[colors.df$result == "Absent, High NP"] <- "#febebe"
colors.df$color[colors.df$result == "Absent, Low NP"] <- "#ddd2ff"
colors.df$color[colors.df$result == "Absent, Moderate NP"] <- "#b5d69f"
colors<-colors.df$color
return(colors)
}
rm(testcolors)
rm(NP_Results)
testcolors<-np.colors(np$Clas_Res)
plot(np["Clas_Res"], col=np.colors(np$Clas_Res))
plot(np["Clas_Res"], col=testcolors)
np.colors<-function(NP_Results){
colors.df<-as.data.frame(matrix(nrow=length(NP_Results),ncol=2))
colnames(colors.df)<-c("result","color")
colors.df$result<-NP_Results
colors.df$color[colors.df$result == "Present, High NP"] <- "#e60000"
colors.df$color[colors.df$result == "Present, Low NP"] <- "#feff73"
colors.df$color[colors.df$result == "Present, Moderate NP"] <- "#ffaa01"
colors.df$color[colors.df$result == "Absent, High NP"] <- "#febebe"
colors.df$color[colors.df$result == "Absent, Low NP"] <- "#ddd2ff"
colors.df$color[colors.df$result == "Absent, Moderate NP"] <- "#b5d69f"
colors<-colors.df$color
return(colors)
}
plot(np["Clas_Res"], col=np.colors(np$Clas_Res))
test2<-np.colors(
NP(chron = chron,
chron_ID = "Survey_Uni",
periods = c("Clas", "Hell", "Cl_He", "ER", "MR", "LR", "LR_EB"),
tracts = tracts,
tracts_ID = "UnitID",
swl = IDW_nnear(tracts = tracts, tracts_ID = "UnitID", n = 8),
perms = 100,
cut = 0.05)["Clas_Res"])
np2<-
NP(chron = chron,
chron_ID = "Survey_Uni",
periods = c("Clas", "Hell", "Cl_He", "ER", "MR", "LR", "LR_EB"),
tracts = tracts,
tracts_ID = "UnitID",
swl = IDW_nnear(tracts = tracts, tracts_ID = "UnitID", n = 8),
perms = 100,
cut = 0.05)
head(np2["Clas_Res"])
head(np2[["Clas_Res"]])
test2<-np.colors(
NP(chron = chron,
chron_ID = "Survey_Uni",
periods = c("Clas", "Hell", "Cl_He", "ER", "MR", "LR", "LR_EB"),
tracts = tracts,
tracts_ID = "UnitID",
swl = IDW_nnear(tracts = tracts, tracts_ID = "UnitID", n = 8),
perms = 100,
cut = 0.05)[["Clas_Res"]])
checkmate::matchArg(np2[["Clas_Res"]], c("Present, High NP", "Present, Low NP", "Present, Moderate NP", "Absent, High NP", "Absent Low NP", "Absent, Moderate NP"))
unique(np2[["Clas_Res"]])
checkkmate::assert_subset(unique(NP_Results), c("Absent, Moderate NP", "Present, Moderate NP", "Present, Low NP", "Present, High NP", "Absent, Low NP", "Absent, High NP"))
checkmate::assert_subset(unique(NP_Results), c("Absent, Moderate NP", "Present, Moderate NP", "Present, Low NP", "Present, High NP", "Absent, Low NP", "Absent, High NP"))
NP_Results<-np2[["Clas_Res"]]
checkmate::assert_subset(unique(NP_Results), c("Absent, Moderate NP", "Present, Moderate NP", "Present, Low NP", "Present, High NP", "Absent, Low NP", "Absent, High NP"))
NP_Results<-np2[["Hell_Res"]]
checkmate::assert_subset(unique(NP_Results), c("Absent, Moderate NP", "Present, Moderate NP", "Present, Low NP", "Present, High NP", "Absent, Low NP", "Absent, High NP"))
NP_Results[[4]]<-"something"
checkmate::assert_subset(unique(NP_Results), c("Absent, Moderate NP", "Present, Moderate NP", "Present, Low NP", "Present, High NP", "Absent, Low NP", "Absent, High NP"))
devtools::load_all()
?np.colors
?NP
?np.colors
devtools::document()
?np.colors
devtools::load_all()
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
o	Devtools::build(binary = F)
Devtools::build(binary = F)
devtools::build(binary = F)
file.exists("~/.ssh/id_rsa.pub")
